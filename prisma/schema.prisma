generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model admin {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  approval_status Boolean
  user_id         String   @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  user            user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model billing_manager {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  payment_status Boolean
  user_id        String   @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  user           user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model booking {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  booking_date   DateTime @db.Timestamp(6)
  booking_status Boolean
  user_id        String   @db.Uuid
  trainer_id     String   @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  trainer        trainer  @relation(fields: [trainer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model platform {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(500)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model trainer {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  skill_set    String    @db.VarChar(100)
  availability DateTime  @db.Timestamp(6)
  location     String    @db.VarChar(100)
  experience   String    @db.VarChar(100)
  user_id      String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  booking      booking[]
  user         user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique @db.VarChar(255)
  firstName       String?           @db.VarChar(255)
  lastName        String?           @db.VarChar(255)
  roq_user_id     String            @db.VarChar(255)
  tenant_id       String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  admin           admin[]
  billing_manager billing_manager[]
  booking         booking[]
  platform        platform[]
  trainer         trainer[]
}
